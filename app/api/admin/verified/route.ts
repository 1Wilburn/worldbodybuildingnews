import { NextResponse } from 'next/server'; import { isAdminAuthed } from '@/app/lib/admin-auth'; import { createClient } from '@supabase/supabase-js'; const sb=()=>createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!,process.env.SUPABASE_SERVICE_ROLE_KEY!,{auth:{persistSession:false}}); export async function GET(){ if(!isAdminAuthed()) return NextResponse.json({error:'Unauthorized'},{status:401}); const {data,error}=await sb().from('verified_accounts').select('*').order('id',{ascending:false}); if(error) return NextResponse.json({error:error.message},{status:400}); return NextResponse.json({items:data||[]}); } export async function POST(req:Request){ if(!isAdminAuthed()) return NextResponse.json({error:'Unauthorized'},{status:401}); const {user_id,guest_name,label}=await req.json(); if(!user_id && !guest_name) return NextResponse.json({error:'Provide user_id or guest_name'},{status:400}); const {data,error}=await sb().from('verified_accounts').insert({user_id:user_id||null,guest_name:guest_name||null,label:label||'Verified'}).select('*').single(); if(error) return NextResponse.json({error:error.message},{status:400}); return NextResponse.json({item:data},{status:201}); } export async function DELETE(req:Request){ if(!isAdminAuthed()) return NextResponse.json({error:'Unauthorized'},{status:401}); const {searchParams}=new URL(req.url); const id=searchParams.get('id'); if(!id) return NextResponse.json({error:'Missing id'},{status:400}); const {error}=await sb().from('verified_accounts').delete().eq('id',Number(id)); if(error) return NextResponse.json({error:error.message},{status:400}); return NextResponse.json({ok:true}); }
